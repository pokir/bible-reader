const fs = require("fs")
const path = require("path")


module.exports = (client, clientEventsFile, debugFile) => {
  const clientEventsStream = fs.createWriteStream(clientEventsFile, { flags: "a" })
  const debugStream = fs.createWriteStream(debugFile, { flags: "a" })

  client.on('debug', (info) => debugStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] debug:\ninfo (string):\n${info}\n`))

  client.on('applicationCommandCreate', (command) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] applicationCommandCreate:\ncommand (ApplicationCommand):\n${command}\n`))
  client.on('applicationCommandDelete', (command) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] applicationCommandDelete:\ncommand (ApplicationCommand):\n${command}\n`))
  client.on('applicationCommandUpdate', (oldCommand, newCommand) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] applicationCommandUpdate:\noldCommand (?ApplicationCommand):\n${oldCommand}\nnewCommand (ApplicationCommand):\n${newCommand}\n`))
  client.on('channelCreate', (channel) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] channelCreate:\nchannel (GuildChannel):\n${channel}\n`))
  client.on('channelDelete', (channel) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] channelDelete:\nchannel (DMChannelGuildChannel):\n${channel}\n`))
  client.on('channelPinsUpdate', (channel, time) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] channelPinsUpdate:\nchannel (TextBasedChannels):\n${channel}\ntime (Date):\n${time}\n`))
  client.on('channelUpdate', (oldChannel, newChannel) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] channelUpdate:\noldChannel (DMChannelGuildChannel):\n${oldChannel}\nnewChannel (DMChannelGuildChannel):\n${newChannel}\n`))
  client.on('emojiCreate', (emoji) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] emojiCreate:\nemoji (GuildEmoji):\n${emoji}\n`))
  client.on('emojiDelete', (emoji) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] emojiDelete:\nemoji (GuildEmoji):\n${emoji}\n`))
  client.on('emojiUpdate', (oldEmoji, newEmoji) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] emojiUpdate:\noldEmoji (GuildEmoji):\n${oldEmoji}\nnewEmoji (GuildEmoji):\n${newEmoji}\n`))
  client.on('error', (error) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] error:\nerror (Error):\n${error}\n`))
  client.on('guildBanAdd', (ban) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildBanAdd:\nban (GuildBan):\n${ban}\n`))
  client.on('guildBanRemove', (ban) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildBanRemove:\nban (GuildBan):\n${ban}\n`))
  client.on('guildCreate', (guild) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildCreate:\nguild (Guild):\n${guild}\n`))
  client.on('guildDelete', (guild) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildDelete:\nguild (Guild):\n${guild}\n`))
  client.on('guildIntegrationsUpdate', (guild) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildIntegrationsUpdate:\nguild (Guild):\n${guild}\n`))
  client.on('guildMemberAdd', (member) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildMemberAdd:\nmember (GuildMember):\n${member}\n`))
  client.on('guildMemberAvailable', (member) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildMemberAvailable:\nmember (GuildMember):\n${member}\n`))
  client.on('guildMemberRemove', (member) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildMemberRemove:\nmember (GuildMember):\n${member}\n`))
  client.on('guildMembersChunk', (members, guild, chunk) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildMembersChunk:\nmembers (Collection <Snowflake, GuildMember>):\n${members}\nguild (Guild):\n${guild}\nchunk (GuildMembersChunk):\n${chunk}\n`))
  client.on('guildMemberUpdate', (oldMember, newMember) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildMemberUpdate:\noldMember (GuildMember):\n${oldMember}\nnewMember (GuildMember):\n${newMember}\n`))
  client.on('guildUnavailable', (guild) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildUnavailable:\nguild (Guild):\n${guild}\n`))
  client.on('guildUpdate', (oldGuild, newGuild) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] guildUpdate:\noldGuild (Guild):\n${oldGuild}\nnewGuild (Guild):\n${newGuild}\n`))
  client.on('interaction', (interaction) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] interaction:\ninteraction (Interaction):\n${interaction}\n`))
  client.on('interactionCreate', (interaction) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] interactionCreate:\ninteraction (Interaction):\n${interaction}\n`))
  client.on('invalidated', () => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] invalidated\n`))
  client.on('invalidRequestWarning', (invalidRequestWarningData) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] invalidRequestWarning:\ninvalidRequestWarningData (InvalidRequestWarningData):\n${invalidRequestWarningData}\n`))
  client.on('inviteCreate', (invite) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] inviteCreate:\ninvite (Invite):\n${invite}\n`))
  client.on('inviteDelete', (invite) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] inviteDelete:\ninvite (Invite):\n${invite}\n`))
  client.on('message', (message) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] message:\nmessage (Message):\n${message}\n`))
  client.on('messageCreate', (message) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageCreate:\nmessage (Message):\n${message}\n`))
  client.on('messageDelete', (message) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageDelete:\nmessage (Message):\n${message}\n`))
  client.on('messageDeleteBulk', (messages) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageDeleteBulk:\nmessages (Collection <Snowflake, Message>):\n${messages}\n`))
  client.on('messageReactionAdd', (messageReaction, user) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageReactionAdd:\nmessageReaction (MessageReaction):\n${messageReaction}\nuser (User):\n${user}\n`))
  client.on('messageReactionRemove', (messageReaction, user) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageReactionRemove:\nmessageReaction (MessageReaction):\n${messageReaction}\nuser (User):\n${user}\n`))
  client.on('messageReactionRemoveAll', (message) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageReactionRemoveAll:\nmessage (Message):\n${message}\n`))
  client.on('messageReactionRemoveEmoji', (reaction) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageReactionRemoveEmoji:\nreaction (MessageReaction):\n${reaction}\n`))
  client.on('messageUpdate', (oldMessage, newMessage) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] messageUpdate:\noldMessage (Message):\n${oldMessage}\nnewMessage (Message):\n${newMessage}\n`))
  client.on('presenceUpdate', (oldPresence, newPresence) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] presenceUpdate:\noldPresence (?Presence):\n${oldPresence}\nnewPresence (Presence):\n${newPresence}\n`))
  client.on('rateLimit', (rateLimitData) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] rateLimit:\nrateLimitData (RateLimitData):\n${rateLimitData}\n`))
  client.on('ready', (client) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] ready:\nclient (Client):\n${client}\n`))
  client.on('roleCreate', (role) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] roleCreate:\nrole (Role):\n${role}\n`))
  client.on('roleDelete', (role) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] roleDelete:\nrole (Role):\n${role}\n`))
  client.on('roleUpdate', (oldRole, newRole) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] roleUpdate:\noldRole (Role):\n${oldRole}\nnewRole (Role):\n${newRole}\n`))
  client.on('shardDisconnect', (event, id) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] shardDisconnect:\nevent (CloseEvent):\n${event}\nid (number):\n${id}\n`))
  client.on('shardError', (error, shardId) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] shardError:\nerror (Error):\n${error}\nshardId (number):\n${shardId}\n`))
  client.on('shardReady', (id, unavailableGuilds) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] shardReady:\nid (number):\n${id}\nunavailableGuilds (?Set <Snowflake>):\n${unavailableGuilds}\n`))
  client.on('shardReconnecting', (id) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] shardReconnecting:\nid (number):\n${id}\n`))
  client.on('shardResume', (id, replayedEvents) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] shardResume:\nid (number):\n${id}\nreplayedEvents (number):\n${replayedEvents}\n`))
  client.on('stageInstanceCreate', (stageInstance) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stageInstanceCreate:\nstageInstance (StageInstance):\n${stageInstance}\n`))
  client.on('stageInstanceDelete', (stageInstance) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stageInstanceDelete:\nstageInstance (StageInstance):\n${stageInstance}\n`))
  client.on('stageInstanceUpdate', (oldStageInstance, newStageInstance) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stageInstanceUpdate:\noldStageInstance (?StageInstance):\n${oldStageInstance}\nnewStageInstance (StageInstance):\n${newStageInstance}\n`))
  client.on('stickerCreate', (sticker) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stickerCreate:\nsticker (Sticker):\n${sticker}\n`))
  client.on('stickerDelete', (sticker) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stickerDelete:\nsticker (Sticker):\n${sticker}\n`))
  client.on('stickerUpdate', (oldSticker, newSticker) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] stickerUpdate:\noldSticker (Sticker):\n${oldSticker}\nnewSticker (Sticker):\n${newSticker}\n`))
  client.on('threadCreate', (thread) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadCreate:\nthread (ThreadChannel):\n${thread}\n`))
  client.on('threadDelete', (thread) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadDelete:\nthread (ThreadChannel):\n${thread}\n`))
  client.on('threadListSync', (threads) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadListSync:\nthreads (Collection <Snowflake, ThreadChannel>):\n${threads}\n`))
  client.on('threadMembersUpdate', (oldMembers, newMembers) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadMembersUpdate:\noldMembers (Collection <Snowflake, ThreadMember>):\n${oldMembers}\nnewMembers (Collection <Snowflake, ThreadMember>):\n${newMembers}\n`))
  client.on('threadMemberUpdate', (oldMember, newMember) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadMemberUpdate:\noldMember (ThreadMember):\n${oldMember}\nnewMember (ThreadMember):\n${newMember}\n`))
  client.on('threadUpdate', (oldThread, newThread) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] threadUpdate:\noldThread (ThreadChannel):\n${oldThread}\nnewThread (ThreadChannel):\n${newThread}\n`))
  client.on('typingStart', (typing) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] typingStart:\ntyping (Typing):\n${typing}\n`))
  client.on('userUpdate', (oldUser, newUser) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] userUpdate:\noldUser (User):\n${oldUser}\nnewUser (User):\n${newUser}\n`))
  client.on('voiceStateUpdate', (oldState, newState) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] voiceStateUpdate:\noldState (VoiceState):\n${oldState}\nnewState (VoiceState):\n${newState}\n`))
  client.on('warn', (info) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] warn:\ninfo (string):\n${info}\n`))
  client.on('webhookUpdate', (channel) => clientEventsStream.write(`-------------------------\n${new Date().toISOString()}\n[CLIENT EVENT] webhookUpdate:\nchannel (TextChannel):\n${channel}\n`))
}

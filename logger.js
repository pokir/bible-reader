module.exports = client => {
  client.on('applicationCommandCreate', (command) => console.log(`[EVENT] applicationCommandCreate:\n\tcommand (ApplicationCommand): ${command}`))
  client.on('applicationCommandDelete', (command) => console.log(`[EVENT] applicationCommandDelete:\n\tcommand (ApplicationCommand): ${command}`))
  client.on('applicationCommandUpdate', (oldCommand, newCommand) => console.log(`[EVENT] applicationCommandUpdate:\n\toldCommand (?ApplicationCommand): ${oldCommand}\n\tnewCommand (ApplicationCommand): ${newCommand}`))
  client.on('channelCreate', (channel) => console.log(`[EVENT] channelCreate:\n\tchannel (GuildChannel): ${channel}`))
  client.on('channelDelete', (channel) => console.log(`[EVENT] channelDelete:\n\tchannel (DMChannelGuildChannel): ${channel}`))
  client.on('channelPinsUpdate', (channel, time) => console.log(`[EVENT] channelPinsUpdate:\n\tchannel (TextBasedChannels): ${channel}\n\ttime (Date): ${time}`))
  client.on('channelUpdate', (oldChannel, newChannel) => console.log(`[EVENT] channelUpdate:\n\toldChannel (DMChannelGuildChannel): ${oldChannel}\n\tnewChannel (DMChannelGuildChannel): ${newChannel}`))
  client.on('debug', (info) => console.log(`[EVENT] debug:\n\tinfo (string): ${info}`))
  client.on('emojiCreate', (emoji) => console.log(`[EVENT] emojiCreate:\n\temoji (GuildEmoji): ${emoji}`))
  client.on('emojiDelete', (emoji) => console.log(`[EVENT] emojiDelete:\n\temoji (GuildEmoji): ${emoji}`))
  client.on('emojiUpdate', (oldEmoji, newEmoji) => console.log(`[EVENT] emojiUpdate:\n\toldEmoji (GuildEmoji): ${oldEmoji}\n\tnewEmoji (GuildEmoji): ${newEmoji}`))
  client.on('error', (error) => console.log(`[EVENT] error:\n\terror (Error): ${error}`))
  client.on('guildBanAdd', (ban) => console.log(`[EVENT] guildBanAdd:\n\tban (GuildBan): ${ban}`))
  client.on('guildBanRemove', (ban) => console.log(`[EVENT] guildBanRemove:\n\tban (GuildBan): ${ban}`))
  client.on('guildCreate', (guild) => console.log(`[EVENT] guildCreate:\n\tguild (Guild): ${guild}`))
  client.on('guildDelete', (guild) => console.log(`[EVENT] guildDelete:\n\tguild (Guild): ${guild}`))
  client.on('guildIntegrationsUpdate', (guild) => console.log(`[EVENT] guildIntegrationsUpdate:\n\tguild (Guild): ${guild}`))
  client.on('guildMemberAdd', (member) => console.log(`[EVENT] guildMemberAdd:\n\tmember (GuildMember): ${member}`))
  client.on('guildMemberAvailable', (member) => console.log(`[EVENT] guildMemberAvailable:\n\tmember (GuildMember): ${member}`))
  client.on('guildMemberRemove', (member) => console.log(`[EVENT] guildMemberRemove:\n\tmember (GuildMember): ${member}`))
  client.on('guildMembersChunk', (members, guild, chunk) => console.log(`[EVENT] guildMembersChunk:\n\tmembers (Collection <Snowflake, GuildMember>): ${members}\n\tguild (Guild): ${guild}\n\tchunk (GuildMembersChunk): ${chunk}`))
  client.on('guildMemberUpdate', (oldMember, newMember) => console.log(`[EVENT] guildMemberUpdate:\n\toldMember (GuildMember): ${oldMember}\n\tnewMember (GuildMember): ${newMember}`))
  client.on('guildUnavailable', (guild) => console.log(`[EVENT] guildUnavailable:\n\tguild (Guild): ${guild}`))
  client.on('guildUpdate', (oldGuild, newGuild) => console.log(`[EVENT] guildUpdate:\n\toldGuild (Guild): ${oldGuild}\n\tnewGuild (Guild): ${newGuild}`))
  client.on('interaction', (interaction) => console.log(`[EVENT] interaction:\n\tinteraction (Interaction): ${interaction}`))
  client.on('interactionCreate', (interaction) => console.log(`[EVENT] interactionCreate:\n\tinteraction (Interaction): ${interaction}`))
  client.on('invalidated', () => console.log(`[EVENT] invalidated`))
  client.on('invalidRequestWarning', (invalidRequestWarningData) => console.log(`[EVENT] invalidRequestWarning:\n\tinvalidRequestWarningData (InvalidRequestWarningData): ${invalidRequestWarningData}`))
  client.on('inviteCreate', (invite) => console.log(`[EVENT] inviteCreate:\n\tinvite (Invite): ${invite}`))
  client.on('inviteDelete', (invite) => console.log(`[EVENT] inviteDelete:\n\tinvite (Invite): ${invite}`))
  client.on('message', (message) => console.log(`[EVENT] message:\n\tmessage (Message): ${message}`))
  client.on('messageCreate', (message) => console.log(`[EVENT] messageCreate:\n\tmessage (Message): ${message}`))
  client.on('messageDelete', (message) => console.log(`[EVENT] messageDelete:\n\tmessage (Message): ${message}`))
  client.on('messageDeleteBulk', (messages) => console.log(`[EVENT] messageDeleteBulk:\n\tmessages (Collection <Snowflake, Message>): ${messages}`))
  client.on('messageReactionAdd', (messageReaction, user) => console.log(`[EVENT] messageReactionAdd:\n\tmessageReaction (MessageReaction): ${messageReaction}\n\tuser (User): ${user}`))
  client.on('messageReactionRemove', (messageReaction, user) => console.log(`[EVENT] messageReactionRemove:\n\tmessageReaction (MessageReaction): ${messageReaction}\n\tuser (User): ${user}`))
  client.on('messageReactionRemoveAll', (message) => console.log(`[EVENT] messageReactionRemoveAll:\n\tmessage (Message): ${message}`))
  client.on('messageReactionRemoveEmoji', (reaction) => console.log(`[EVENT] messageReactionRemoveEmoji:\n\treaction (MessageReaction): ${reaction}`))
  client.on('messageUpdate', (oldMessage, newMessage) => console.log(`[EVENT] messageUpdate:\n\toldMessage (Message): ${oldMessage}\n\tnewMessage (Message): ${newMessage}`))
  client.on('presenceUpdate', (oldPresence, newPresence) => console.log(`[EVENT] presenceUpdate:\n\toldPresence (?Presence): ${oldPresence}\n\tnewPresence (Presence): ${newPresence}`))
  client.on('rateLimit', (rateLimitData) => console.log(`[EVENT] rateLimit:\n\trateLimitData (RateLimitData): ${rateLimitData}`))
  client.on('ready', (client) => console.log(`[EVENT] ready:\n\tclient (Client): ${client}`))
  client.on('roleCreate', (role) => console.log(`[EVENT] roleCreate:\n\trole (Role): ${role}`))
  client.on('roleDelete', (role) => console.log(`[EVENT] roleDelete:\n\trole (Role): ${role}`))
  client.on('roleUpdate', (oldRole, newRole) => console.log(`[EVENT] roleUpdate:\n\toldRole (Role): ${oldRole}\n\tnewRole (Role): ${newRole}`))
  client.on('shardDisconnect', (event, id) => console.log(`[EVENT] shardDisconnect:\n\tevent (CloseEvent): ${event}\n\tid (number): ${id}`))
  client.on('shardError', (error, shardId) => console.log(`[EVENT] shardError:\n\terror (Error): ${error}\n\tshardId (number): ${shardId}`))
  client.on('shardReady', (id, unavailableGuilds) => console.log(`[EVENT] shardReady:\n\tid (number): ${id}\n\tunavailableGuilds (?Set <Snowflake>): ${unavailableGuilds}`))
  client.on('shardReconnecting', (id) => console.log(`[EVENT] shardReconnecting:\n\tid (number): ${id}`))
  client.on('shardResume', (id, replayedEvents) => console.log(`[EVENT] shardResume:\n\tid (number): ${id}\n\treplayedEvents (number): ${replayedEvents}`))
  client.on('stageInstanceCreate', (stageInstance) => console.log(`[EVENT] stageInstanceCreate:\n\tstageInstance (StageInstance): ${stageInstance}`))
  client.on('stageInstanceDelete', (stageInstance) => console.log(`[EVENT] stageInstanceDelete:\n\tstageInstance (StageInstance): ${stageInstance}`))
  client.on('stageInstanceUpdate', (oldStageInstance, newStageInstance) => console.log(`[EVENT] stageInstanceUpdate:\n\toldStageInstance (?StageInstance): ${oldStageInstance}\n\tnewStageInstance (StageInstance): ${newStageInstance}`))
  client.on('stickerCreate', (sticker) => console.log(`[EVENT] stickerCreate:\n\tsticker (Sticker): ${sticker}`))
  client.on('stickerDelete', (sticker) => console.log(`[EVENT] stickerDelete:\n\tsticker (Sticker): ${sticker}`))
  client.on('stickerUpdate', (oldSticker, newSticker) => console.log(`[EVENT] stickerUpdate:\n\toldSticker (Sticker): ${oldSticker}\n\tnewSticker (Sticker): ${newSticker}`))
  client.on('threadCreate', (thread) => console.log(`[EVENT] threadCreate:\n\tthread (ThreadChannel): ${thread}`))
  client.on('threadDelete', (thread) => console.log(`[EVENT] threadDelete:\n\tthread (ThreadChannel): ${thread}`))
  client.on('threadListSync', (threads) => console.log(`[EVENT] threadListSync:\n\tthreads (Collection <Snowflake, ThreadChannel>): ${threads}`))
  client.on('threadMembersUpdate', (oldMembers, newMembers) => console.log(`[EVENT] threadMembersUpdate:\n\toldMembers (Collection <Snowflake, ThreadMember>): ${oldMembers}\n\tnewMembers (Collection <Snowflake, ThreadMember>): ${newMembers}`))
  client.on('threadMemberUpdate', (oldMember, newMember) => console.log(`[EVENT] threadMemberUpdate:\n\toldMember (ThreadMember): ${oldMember}\n\tnewMember (ThreadMember): ${newMember}`))
  client.on('threadUpdate', (oldThread, newThread) => console.log(`[EVENT] threadUpdate:\n\toldThread (ThreadChannel): ${oldThread}\n\tnewThread (ThreadChannel): ${newThread}`))
  client.on('typingStart', (typing) => console.log(`[EVENT] typingStart:\n\ttyping (Typing): ${typing}`))
  client.on('userUpdate', (oldUser, newUser) => console.log(`[EVENT] userUpdate:\n\toldUser (User): ${oldUser}\n\tnewUser (User): ${newUser}`))
  client.on('voiceStateUpdate', (oldState, newState) => console.log(`[EVENT] voiceStateUpdate:\n\toldState (VoiceState): ${oldState}\n\tnewState (VoiceState): ${newState}`))
  client.on('warn', (info) => console.log(`[EVENT] warn:\n\tinfo (string): ${info}`))
  client.on('webhookUpdate', (channel) => console.log(`[EVENT] webhookUpdate:\n\tchannel (TextChannel): ${channel}`))
}
